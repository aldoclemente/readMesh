#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
add_segments(x = mesh$nodes[mesh$edges[,1],1],
y = mesh$nodes[mesh$edges[,1],2],
xend = mesh$nodes[mesh$edges[,2],1],
yend = mesh$nodes[mesh$edges[,2],2],
color = I('black'), size=I(5),
showlegend = F)  %>%
layout(
scene=list(aspectratio=list(x=1,y=1)),
xaxis = list(
title = '',
showgrid = F,
zeroline = F,
showticklabels = F
),
yaxis = list(
title = '',
showgrid = F,
zeroline = F,
showticklabels = F
))
}
Plot.FEM.1.5D(FEM(sol_exact, FEMbasis))
Plot.FEM.1.5D<-function(FEM, ...){
mesh <- FEM$FEMbasis$mesh
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2], coeff=FEM$coeff)
plot_ly(x= ~mesh$nodes[,1], y=mesh$nodes[,2],
i=mesh$edges[,1], j=mesh$edges[,2], color = FEM$coeff,
type="scatters", mode = "lines",
text = vs$label, hoverinfo = "text")
#%>%
# add_markers(x = mesh$nodes[,1],
#             y = mesh$nodes[,2],
#             color = I('black'), size= I(0),
#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
# add_segments(x = mesh$nodes[mesh$edges[,1],1],
#              y = mesh$nodes[mesh$edges[,1],2],
#              xend = mesh$nodes[mesh$edges[,2],1],
#              yend = mesh$nodes[mesh$edges[,2],2],
#              color = FEM$coeff, size=I(2),
#              showlegend = F)
}
Plot.FEM.1.5D(FEM(sol_exact, FEMbasis))
Plot.FEM.1.5D<-function(FEM, ...){
mesh <- FEM$FEMbasis$mesh
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2], coeff=FEM$coeff)
plot_ly(x= ~mesh$nodes[,1], y=mesh$nodes[,2],
i=mesh$edges[,1], j=mesh$edges[,2], color = ~FEM$coeff,
type="scatters", mode = "lines",
text = ~FEM$coeff, hoverinfo = "text")
#%>%
# add_markers(x = mesh$nodes[,1],
#             y = mesh$nodes[,2],
#             color = I('black'), size= I(0),
#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
# add_segments(x = mesh$nodes[mesh$edges[,1],1],
#              y = mesh$nodes[mesh$edges[,1],2],
#              xend = mesh$nodes[mesh$edges[,2],1],
#              yend = mesh$nodes[mesh$edges[,2],2],
#              color = FEM$coeff, size=I(2),
#              showlegend = F)
}
Plot.FEM.1.5D(FEM(sol_exact, FEMbasis))
Plot.FEM.1.5D<-function(FEM, ...){
mesh <- FEM$FEMbasis$mesh
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2], z=rep(0,nrow(mesh$nodes)), coeff=FEM$coeff)
I = mesh$edges[,1] ; J = mesh$edges[,2]
plot_ly(data_plot, x= ~x, y=y, z=~z, intensity=~coeff, color = ~coeff,
i=I, j=J,
type = 'scatter3d', mode = 'lines',
text = ~FEM$coeff, hoverinfo = "text")
# plot_ly(data, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',
#
#         opacity = 1, line = list(width = 6, color = ~color, reverscale = FALSE))
# #%>%
# add_markers(x = mesh$nodes[,1],
#             y = mesh$nodes[,2],
#             color = I('black'), size= I(0),
#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
# add_segments(x = mesh$nodes[mesh$edges[,1],1],
#              y = mesh$nodes[mesh$edges[,1],2],
#              xend = mesh$nodes[mesh$edges[,2],1],
#              yend = mesh$nodes[mesh$edges[,2],2],
#              color = FEM$coeff, size=I(2),
#              showlegend = F)
}
Plot.FEM.1.5D(FEM(sol_exact, FEMbasis))
dim(mesh$nodes)
FEM = FEM(sol_exact, FEMbasis)
plot(FEM)
Plot.FEM.1.5D(FEM)
rlang::last_trace()
length(FEM$coeff)
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2],
z=matrix(0,nrow=nrow(mesh$nodes), ncol=1), coeff=FEM$coeff)
I = mesh$edges[,1] ; J = mesh$edges[,2]
plot_ly(data_plot, x= ~x, y=y, z=~z, intensity=~coeff, color = ~coeff,
i=I, j=J,
type = 'scatter3d', mode = 'lines',
text = ~FEM$coeff, hoverinfo = "text")
rlang::last_trace()
dim(data_plot)
is.na(data_plot)
sum( is.na(data_plot) )
Plot.FEM.1.5D<-function(FEM, ...){
mesh <- FEM$FEMbasis$mesh
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2],
z=matrix(0,nrow=nrow(mesh$nodes), ncol=1), coeff=FEM$coeff)
I = mesh$edges[,1] ; J = mesh$edges[,2]
plot_ly(data_plot, x= ~x, y=y, z=~z, intensity=~coeff, color = ~coeff,
i=I, j=J,
type = 'scatter', mode = 'marjers+lines',
text = ~FEM$coeff, hoverinfo = "text")
# plot_ly(data, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',
#
#         opacity = 1, line = list(width = 6, color = ~color, reverscale = FALSE))
# #%>%
# add_markers(x = mesh$nodes[,1],
#             y = mesh$nodes[,2],
#             color = I('black'), size= I(0),
#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
# add_segments(x = mesh$nodes[mesh$edges[,1],1],
#              y = mesh$nodes[mesh$edges[,1],2],
#              xend = mesh$nodes[mesh$edges[,2],1],
#              yend = mesh$nodes[mesh$edges[,2],2],
#              color = FEM$coeff, size=I(2),
#              showlegend = F)
}
plot(FEM)
Plot.FEM.1.5D(FEM)
Plot.FEM.1.5D<-function(FEM, ...){
mesh <- FEM$FEMbasis$mesh
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2],
z=matrix(0,nrow=nrow(mesh$nodes), ncol=1), coeff=FEM$coeff)
I = mesh$edges[,1] ; J = mesh$edges[,2]
plot_ly(data_plot, x= ~x, y=y, z=~z, intensity=~coeff, color = ~coeff,
i=I, j=J,
type = 'scatter', mode = 'markers+lines',
text = ~FEM$coeff, hoverinfo = "text")
# plot_ly(data, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',
#
#         opacity = 1, line = list(width = 6, color = ~color, reverscale = FALSE))
# #%>%
# add_markers(x = mesh$nodes[,1],
#             y = mesh$nodes[,2],
#             color = I('black'), size= I(0),
#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
# add_segments(x = mesh$nodes[mesh$edges[,1],1],
#              y = mesh$nodes[mesh$edges[,1],2],
#              xend = mesh$nodes[mesh$edges[,2],1],
#              yend = mesh$nodes[mesh$edges[,2],2],
#              color = FEM$coeff, size=I(2),
#              showlegend = F)
}
plot(FEM)
Plot.FEM.1.5D(FEM)
rlang::last_trace()
Plot.FEM.1.5D<-function(FEM, ...){
mesh <- FEM$FEMbasis$mesh
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2],
z=matrix(0,nrow=nrow(mesh$nodes), ncol=1), coeff=FEM$coeff)
I = mesh$edges[,1] ; J = mesh$edges[,2]
plot_ly(data_plot, x= ~x, y=y, z=~z, intensity=~coeff, #color = ~coeff,
i=I, j=J,
type = 'scatter', mode = 'markers+lines',
text = ~FEM$coeff, hoverinfo = "text")
# plot_ly(data, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',
#
#         opacity = 1, line = list(width = 6, color = ~color, reverscale = FALSE))
# #%>%
# add_markers(x = mesh$nodes[,1],
#             y = mesh$nodes[,2],
#             color = I('black'), size= I(0),
#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
# add_segments(x = mesh$nodes[mesh$edges[,1],1],
#              y = mesh$nodes[mesh$edges[,1],2],
#              xend = mesh$nodes[mesh$edges[,2],1],
#              yend = mesh$nodes[mesh$edges[,2],2],
#              color = FEM$coeff, size=I(2),
#              showlegend = F)
}
Plot.FEM.1.5D(FEM)
Plot.FEM.1.5D<-function(FEM, ...){
mesh <- FEM$FEMbasis$mesh
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2],
z=matrix(0,nrow=nrow(mesh$nodes), ncol=1), coeff=FEM$coeff)
I = mesh$edges[,1] ; J = mesh$edges[,2]
plot_ly(data_plot, x= ~x, y=y, z=~z, #intensity=~coeff, #color = ~coeff,
i=I, j=J,
type = 'scatter', mode = 'markers+lines',
text = ~FEM$coeff, hoverinfo = "text")
# plot_ly(data, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',
#
#         opacity = 1, line = list(width = 6, color = ~color, reverscale = FALSE))
# #%>%
# add_markers(x = mesh$nodes[,1],
#             y = mesh$nodes[,2],
#             color = I('black'), size= I(0),
#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
# add_segments(x = mesh$nodes[mesh$edges[,1],1],
#              y = mesh$nodes[mesh$edges[,1],2],
#              xend = mesh$nodes[mesh$edges[,2],1],
#              yend = mesh$nodes[mesh$edges[,2],2],
#              color = FEM$coeff, size=I(2),
#              showlegend = F)
}
Plot.FEM.1.5D(FEM)
Plot.FEM.1.5D<-function(FEM, ...){
mesh <- FEM$FEMbasis$mesh
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2],
z=matrix(0,nrow=nrow(mesh$nodes), ncol=1), coeff=FEM$coeff)
I = mesh$edges[,1] ; J = mesh$edges[,2]
plot_ly(data_plot, x= ~x, y=y, z=~z, intensity=~coeff, color = ~coeff,
# i=I, j=J,
type = 'scatter', mode = 'markers+lines',
text = ~FEM$coeff, hoverinfo = "text")
# plot_ly(data, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',
#
#         opacity = 1, line = list(width = 6, color = ~color, reverscale = FALSE))
# #%>%
# add_markers(x = mesh$nodes[,1],
#             y = mesh$nodes[,2],
#             color = I('black'), size= I(0),
#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
# add_segments(x = mesh$nodes[mesh$edges[,1],1],
#              y = mesh$nodes[mesh$edges[,1],2],
#              xend = mesh$nodes[mesh$edges[,2],1],
#              yend = mesh$nodes[mesh$edges[,2],2],
#              color = FEM$coeff, size=I(2),
#              showlegend = F)
}
Plot.FEM.1.5D(FEM)
Plot.FEM.1.5D<-function(FEM, ...){
mesh <- FEM$FEMbasis$mesh
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2],
z=matrix(0,nrow=nrow(mesh$nodes), ncol=1), coeff=FEM$coeff)
I = mesh$edges[,1] ; J = mesh$edges[,2]
plot_ly(data_plot, x= ~x, y=y, z=~z, intensity=~coeff, color = ~coeff,
# i=I, j=J,
type = 'scatter3d', mode = 'lines',
text = ~FEM$coeff, hoverinfo = "text")
# plot_ly(data, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',
#
#         opacity = 1, line = list(width = 6, color = ~color, reverscale = FALSE))
# #%>%
# add_markers(x = mesh$nodes[,1],
#             y = mesh$nodes[,2],
#             color = I('black'), size= I(0),
#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
# add_segments(x = mesh$nodes[mesh$edges[,1],1],
#              y = mesh$nodes[mesh$edges[,1],2],
#              xend = mesh$nodes[mesh$edges[,2],1],
#              yend = mesh$nodes[mesh$edges[,2],2],
#              color = FEM$coeff, size=I(2),
#              showlegend = F)
}
Plot.FEM.1.5D(FEM)
data_plot$z
Plot.FEM.1.5D<-function(FEM, ...){
mesh <- FEM$FEMbasis$mesh
data_plot <- data.frame(x=mesh$nodes[,1], y=mesh$nodes[,2],
z=matrix(0,nrow=nrow(mesh$nodes), ncol=1), coeff=FEM$coeff)
I = mesh$edges[,1] ; J = mesh$edges[,2]
plot_ly(data_plot, x= ~x, y=y, z=~z, #intensity=~coeff, color = ~coeff,
# i=I, j=J,
type = 'scatter3d', mode = 'lines',
text = ~FEM$coeff, hoverinfo = "text")
# plot_ly(data, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',
#
#         opacity = 1, line = list(width = 6, color = ~color, reverscale = FALSE))
# #%>%
# add_markers(x = mesh$nodes[,1],
#             y = mesh$nodes[,2],
#             color = I('black'), size= I(0),
#             hoverinfo = 'text',
#
#             text = paste('</br><b> Coordinates:', round(mesh$nodes[,1],2),
#                          round(mesh$nodes[,2],2)),
#             showlegend = F,
#             visible = T) %>%
# add_segments(x = mesh$nodes[mesh$edges[,1],1],
#              y = mesh$nodes[mesh$edges[,1],2],
#              xend = mesh$nodes[mesh$edges[,2],1],
#              yend = mesh$nodes[mesh$edges[,2],2],
#              color = FEM$coeff, size=I(2),
#              showlegend = F)
}
Plot.FEM.1.5D(FEM)
library(plotly)
library(igraph)
library(igraphdata)
data(karate, package="igraphdata")
G <- upgrade_graph(karate)
L <- layout.circle(G)
#2
vs <- as.data.frame(igraph::get.vertex.attribute(G))
es <- as.data.frame(get.edgelist(G))
Nv <- length(vs)
Ne <- length(es[1]$V1)
#3
Xn <- L[,1]
Yn <- L[,2]
network <- plot_ly(x = ~Xn, y = ~Yn, type="scatter", mode = "markers",
text = vs$label, hoverinfo = "text")
network
#3
edge_shapes <- list()
for(i in 1:Ne) {
v0 <- es[i,]$V1
v1 <- es[i,]$V2
edge_shape = list(
type = "line",
line = list(color = "#030303", width = 0.3),
x0 = Xn[vs$name == v0],
y0 = Yn[vs$name == v0],
x1 = Xn[vs$name == v1],
y1 = Yn[vs$name == v1]
)
edge_shapes[[i]] <- edge_shape
}
#4
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
edge_shape = list(
type = "line",
line = list(width = 0.3),
x0 = Xn[vs$name == v0],
y0 = Yn[vs$name == v0],
x1 = Xn[vs$name == v1],
y1 = Yn[vs$name == v1]
)
edge_shapes[[i]] <- edge_shape
for(i in 1:Ne) {
v0 <- es[i,]$V1
v1 <- es[i,]$V2
edge_shape = list(
type = "line",
line = list(width = 0.3),
x0 = Xn[vs$name == v0],
y0 = Yn[vs$name == v0],
x1 = Xn[vs$name == v1],
y1 = Yn[vs$name == v1]
)
edge_shapes[[i]] <- edge_shape
}
#4
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
fig <- layout(
network,
title = 'Karate Network',
shapes = edge_shapes,
xaxis = axis,
yaxis = axis
)
fig
library(plotly)
library(igraph)
library(igraphdata)
data(karate, package="igraphdata")
G <- upgrade_graph(karate)
L <- layout.circle(G)
#2
vs <- as.data.frame(igraph::get.vertex.attribute(G))
es <- as.data.frame(get.edgelist(G))
Nv <- length(vs)
Ne <- length(es[1]$V1)
#3
Xn <- L[,1]
Yn <- L[,2]
network <- plot_ly(x = ~Xn, y = ~Yn, type="scatter", mode = "markers",
text = vs$label, hoverinfo = "text")
network
#3
edge_shapes <- list()
for(i in 1:Ne) {
v0 <- es[i,]$V1
v1 <- es[i,]$V2
edge_shape = list(
type = "line",
line = list(width = 0.3,color=c("red","blue")),
x0 = Xn[vs$name == v0],
y0 = Yn[vs$name == v0],
x1 = Xn[vs$name == v1],
y1 = Yn[vs$name == v1]
)
edge_shapes[[i]] <- edge_shape
}
#4
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
fig <- layout(
network,
title = 'Karate Network',
shapes = edge_shapes,
xaxis = axis,
yaxis = axis
)
fig
for(i in 1:Ne) {
v0 <- es[i,]$V1
v1 <- es[i,]$V2
edge_shape = list(
type = "line",
line = list(width = 0.3,color="red"),
x0 = Xn[vs$name == v0],
y0 = Yn[vs$name == v0],
x1 = Xn[vs$name == v1],
y1 = Yn[vs$name == v1]
)
edge_shapes[[i]] <- edge_shape
}
#4
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
fig <- layout(
network,
title = 'Karate Network',
shapes = edge_shapes,
xaxis = axis,
yaxis = axis
)
fig
x0
library(plotly)
library(igraph)
library(igraphdata)
data(karate, package="igraphdata")
G <- upgrade_graph(karate)
L <- layout.circle(G)
#2
vs <- as.data.frame(igraph::get.vertex.attribute(G))
es <- as.data.frame(get.edgelist(G))
Nv <- length(vs)
Ne <- length(es[1]$V1)
Xn <- L[,1]
Yn <- L[,2]
network <- plot_ly(x = ~Xn, y = ~Yn, type="scatter", mode = "markers",
text = vs$label, hoverinfo = "text")
network
#3
edge_shapes <- list()
for(i in 1:Ne) {
v0 <- es[i,]$V1
v1 <- es[i,]$V2
edge_shape = list(
type = "line",
line = list(width = 0.3,color= sqrt( (Xn[vs$name == v0]-(Xn[vs$name == v1])^2)+
(Yn[vs$name == v0]-(Yn[vs$name == v1])^2)) ),
x0 = Xn[vs$name == v0],
y0 = Yn[vs$name == v0],
x1 = Xn[vs$name == v1],
y1 = Yn[vs$name == v1]
)
edge_shapes[[i]] <- edge_shape
}
#4
axis <- list(title = "", showgrid = FALSE, showticklabels = FALSE, zeroline = FALSE)
fig <- layout(
network,
title = 'Karate Network',
shapes = edge_shapes,
xaxis = axis,
yaxis = axis
)
fig
